<!DOCTYPE html>
<html>

<head>
    <title>Lab 1</title>
</head>

<body>
    <h1 class="title" id="title">Lab 1 ASP.NET</h1>
        <h2 class="header" id="ASP.NET">ASP.NET</h2>
            <p>ASP.NET is a open source framework designed by Microsoft for the development of web applications. It is also widely compatible with web browsers and mobile platforms. 
                ASP.NET allows for server side generation of dynamic web apps that can use client side software to update and allow for user interaction
            </p>
            <a class="link" href="https://dotnet.microsoft.com/apps/aspnet">Microsoft ASP.NET</a>
        <h2 class="header" id="forms">ASP.NET Forms</h2>
        <p>Forms launched with the first version of ASP.NET in 2002, before Forms were introduced any code used within the site would be written in chunks between script tags and 
            any CSS would be writtin within style tags in the head section of the webpage. Having HTML, CSS, and code all in one file proved to be very difficult to debug and 
            troubleshoot as well as very slow for browsers. Another huge issue facing developers was the fact that compatibility among browsers was very complicated so pages were 
            limited in their abilities to accommodate that singular issue.
            <a class="link" href="https://medium.com/young-coder/did-asp-net-web-forms-need-to-die-4b7bce958aaa">Young Coder</a>
        </p>    
        <p>Forms introduced a drag and drop control platform that allows for easy layout of webpages. Forms are user requested pages that are compiled on the server and the framework
            helps to generate the HTML markup. This makes the framework very quick and flexible.
                <a class="link" href="https://docs.microsoft.com/en-us/aspnet/web-forms/what-is-web-forms">Microsoft What is Web Forms?</a>
            </p>
            <p>Forms were the main basis for the framework before the introduction of MVC. Forms are also no longer supported by ASP.NET Core the newest form of ASP.NET.
                In forms code is often written in code-behind format where files are kept separate and the controller handles the compilation based on language used. 
                This allows the developers to make adjustments much faster and easier than if it weren't compartmentalized.
            <a class="link" href="https://en.wikipedia.org/wiki/ASP.NET_Web_Forms">Wikipedia</a>
            </p>          
        <h2 class="header" id="mvc">ASP.NET MVC</h2>
            <p>MVC stands for Model, View, Controller it is a newer altrernative to Forms. Where forms allowed developers to code against predetermined controls that compiled HTML, 
                MVC allows develpers more control over all of their code.<a class="link" href="https://www.tutorialspoint.com/asp.net_mvc/asp.net_mvc_overview.htm">Tutorials Point</a>
            </p>
            <p>In MVC the Model is what contains the logic code, the Controller is what handles and processes user requests, and the view is the user interface.
                The controller acts as the intermediary for the model and the view. This method is much easier on developers because the compartmentalized nature of the framework allows
                for easy division of labor as well as easier access to each set of code to troubleshoot and debug when necessary. MVC is not a complete replacement for Forms but it works
                in tandem with it.<a class="link" href="https://www.c-sharpcorner.com/article/getting-started-with-asp-net-mvc-part-one/">C-sharp Corner</a>
            </p>
            <p>The separation of tasks in MVC also allows for easier scalability of web apps because there is less code to work through in each partition. 
                I felt this direct quote from Microsoft was a good summary of this example:
                <br><br>
                &ldquo;Both the view and the controller depend on the model. However, the model depends on neither the view nor the controller. This is one of the key benefits of the separation. 
                This separation allows the model to be built and tested independent of the visual presentation.&rdquo;
                <br> 
                <a class="link" href="https://docs.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-3.1">Microsoft MVC overview</a> 
            </p>
        <h2 class="header" id="core">ASP.NET Core</h2>
            <p>ASP.NET Core is the newest launch of the Framework version one was originally launched in 2016 and the latest version Core 3.1 was released December of 2019.
                <a class="link" href="https://dotnet.microsoft.com/learn/aspnet/what-is-aspnet-core">What is ASP.NET Core?</a> and <a class="link" href="https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/">Announcing .NET Core 3.1</a>
                It is an open source, cross platform Web framework that is specifically designed to reduce overhead so third party packages can be added as needed by the design team.
                It accomplishes this by eliminating the need for some browser to server communication systems. As well it also allows for the creation of class libraries for use across .NET frameworks.
                <a class="link" href="https://www.tutorialsteacher.com/core/aspnet-core-introduction">ASP.NET Core Introduction</a> Core also allows for access to Third party libraries that greatly expands the 
                ability to create dynamic web apps that are commonly in use today. <a class="link" href="https://andrewlock.net/aspnetcore-in-action-2e-getting-started-with-asp-net-core/">Andrew Lock</a> 
            </p>
        <h2 class="header" id="summary">ASP.NET Summary</h2>
            <p>In summary the release of ASP.NET core has established an environment that allows small teams to create dynamic and complex web applications that would not be possible 
                without the predicessors in ASP.NET Forms and ASP.NET MVC. Forms being part of the original framework allowed developers to explore the infancy of dynamic web pages 
                and web apps as well as conquer the problem of cross compatibility with web browsers. The introduction of MVC allowed for modular development between the model, contoller, and View
                greatly advancing the capabilities of a small team to create a dynamic easy to maintain scalable web apps and webpages. Finally, The development of ASP.NET Core advanced the ideas of the 
                previous two frameworks and brought us the dynamic world of applications that we are all familiar with today.
            </p>        
</body>

</html>
